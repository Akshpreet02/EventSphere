// source: src/gPRC/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var google_protobuf_timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb.js");
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol(
	"proto.EventSphere.CustomerRegistrationRequest",
	null,
	global
);
goog.exportSymbol(
	"proto.EventSphere.CustomerRegistrationResponse",
	null,
	global
);
goog.exportSymbol("proto.EventSphere.DeleteEventRequest", null, global);
goog.exportSymbol("proto.EventSphere.DeleteEventResponse", null, global);
goog.exportSymbol("proto.EventSphere.EditEventRequest", null, global);
goog.exportSymbol("proto.EventSphere.EditEventResponse", null, global);
goog.exportSymbol("proto.EventSphere.Event", null, global);
goog.exportSymbol(
	"proto.EventSphere.EventPosterRegistrationRequest",
	null,
	global
);
goog.exportSymbol(
	"proto.EventSphere.EventPosterRegistrationResponse",
	null,
	global
);
goog.exportSymbol("proto.EventSphere.FetchEventsRequest", null, global);
goog.exportSymbol("proto.EventSphere.PostEventRequest", null, global);
goog.exportSymbol("proto.EventSphere.PostEventResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.CustomerRegistrationRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.CustomerRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.CustomerRegistrationRequest.displayName =
		"proto.EventSphere.CustomerRegistrationRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.CustomerRegistrationResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.CustomerRegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.CustomerRegistrationResponse.displayName =
		"proto.EventSphere.CustomerRegistrationResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.EventPosterRegistrationRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.EventPosterRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.EventPosterRegistrationRequest.displayName =
		"proto.EventSphere.EventPosterRegistrationRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.EventPosterRegistrationResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.EventPosterRegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.EventPosterRegistrationResponse.displayName =
		"proto.EventSphere.EventPosterRegistrationResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.PostEventRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.PostEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.PostEventRequest.displayName =
		"proto.EventSphere.PostEventRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.PostEventResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.PostEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.PostEventResponse.displayName =
		"proto.EventSphere.PostEventResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.FetchEventsRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.FetchEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.FetchEventsRequest.displayName =
		"proto.EventSphere.FetchEventsRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.Event = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.Event.displayName = "proto.EventSphere.Event";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.EditEventRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.EditEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.EditEventRequest.displayName =
		"proto.EventSphere.EditEventRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.EditEventResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.EditEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.EditEventResponse.displayName =
		"proto.EventSphere.EditEventResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.DeleteEventRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.DeleteEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.DeleteEventRequest.displayName =
		"proto.EventSphere.DeleteEventRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSphere.DeleteEventResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventSphere.DeleteEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.EventSphere.DeleteEventResponse.displayName =
		"proto.EventSphere.DeleteEventResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.CustomerRegistrationRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.CustomerRegistrationRequest.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.CustomerRegistrationRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.CustomerRegistrationRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				username: jspb.Message.getFieldWithDefault(msg, 1, ""),
				password: jspb.Message.getFieldWithDefault(msg, 2, ""),
				email: jspb.Message.getFieldWithDefault(msg, 3, ""),
				fullName: jspb.Message.getFieldWithDefault(msg, 4, ""),
				role: jspb.Message.getFieldWithDefault(msg, 5, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.CustomerRegistrationRequest}
 */
proto.EventSphere.CustomerRegistrationRequest.deserializeBinary = function (
	bytes
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.CustomerRegistrationRequest();
	return proto.EventSphere.CustomerRegistrationRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.CustomerRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.CustomerRegistrationRequest}
 */
proto.EventSphere.CustomerRegistrationRequest.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {string} */ (reader.readString());
					msg.setUsername(value);
					break;
				case 2:
					var value = /** @type {string} */ (reader.readString());
					msg.setPassword(value);
					break;
				case 3:
					var value = /** @type {string} */ (reader.readString());
					msg.setEmail(value);
					break;
				case 4:
					var value = /** @type {string} */ (reader.readString());
					msg.setFullName(value);
					break;
				case 5:
					var value = /** @type {string} */ (reader.readString());
					msg.setRole(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.EventSphere.CustomerRegistrationRequest.serializeBinaryToWriter(
			this,
			writer
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.CustomerRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.CustomerRegistrationRequest.serializeBinaryToWriter =
	function (message, writer) {
		var f = undefined;
		f = message.getUsername();
		if (f.length > 0) {
			writer.writeString(1, f);
		}
		f = message.getPassword();
		if (f.length > 0) {
			writer.writeString(2, f);
		}
		f = message.getEmail();
		if (f.length > 0) {
			writer.writeString(3, f);
		}
		f = message.getFullName();
		if (f.length > 0) {
			writer.writeString(4, f);
		}
		f = message.getRole();
		if (f.length > 0) {
			writer.writeString(5, f);
		}
	};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.getUsername =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationRequest} returns this
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.setUsername = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.getPassword =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 2, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationRequest} returns this
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.setPassword = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string email = 3;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.getEmail = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationRequest} returns this
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.setEmail = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string full_name = 4;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.getFullName =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 4, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationRequest} returns this
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.setFullName = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string role = 5;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.getRole = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationRequest} returns this
 */
proto.EventSphere.CustomerRegistrationRequest.prototype.setRole = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.CustomerRegistrationResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.CustomerRegistrationResponse.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.CustomerRegistrationResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.CustomerRegistrationResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.CustomerRegistrationResponse}
 */
proto.EventSphere.CustomerRegistrationResponse.deserializeBinary = function (
	bytes
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.CustomerRegistrationResponse();
	return proto.EventSphere.CustomerRegistrationResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.CustomerRegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.CustomerRegistrationResponse}
 */
proto.EventSphere.CustomerRegistrationResponse.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {string} */ (reader.readString());
					msg.setMessage(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.CustomerRegistrationResponse.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.EventSphere.CustomerRegistrationResponse.serializeBinaryToWriter(
			this,
			writer
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.CustomerRegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.CustomerRegistrationResponse.serializeBinaryToWriter =
	function (message, writer) {
		var f = undefined;
		f = message.getMessage();
		if (f.length > 0) {
			writer.writeString(1, f);
		}
	};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.EventSphere.CustomerRegistrationResponse.prototype.getMessage =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.CustomerRegistrationResponse} returns this
 */
proto.EventSphere.CustomerRegistrationResponse.prototype.setMessage = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.EventPosterRegistrationRequest.prototype.toObject =
		function (opt_includeInstance) {
			return proto.EventSphere.EventPosterRegistrationRequest.toObject(
				opt_includeInstance,
				this
			);
		};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.EventPosterRegistrationRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.EventPosterRegistrationRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				username: jspb.Message.getFieldWithDefault(msg, 1, ""),
				password: jspb.Message.getFieldWithDefault(msg, 2, ""),
				email: jspb.Message.getFieldWithDefault(msg, 3, ""),
				fullName: jspb.Message.getFieldWithDefault(msg, 4, ""),
				role: jspb.Message.getFieldWithDefault(msg, 5, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.EventPosterRegistrationRequest}
 */
proto.EventSphere.EventPosterRegistrationRequest.deserializeBinary = function (
	bytes
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.EventPosterRegistrationRequest();
	return proto.EventSphere.EventPosterRegistrationRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.EventPosterRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.EventPosterRegistrationRequest}
 */
proto.EventSphere.EventPosterRegistrationRequest.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {string} */ (reader.readString());
					msg.setUsername(value);
					break;
				case 2:
					var value = /** @type {string} */ (reader.readString());
					msg.setPassword(value);
					break;
				case 3:
					var value = /** @type {string} */ (reader.readString());
					msg.setEmail(value);
					break;
				case 4:
					var value = /** @type {string} */ (reader.readString());
					msg.setFullName(value);
					break;
				case 5:
					var value = /** @type {string} */ (reader.readString());
					msg.setRole(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.EventSphere.EventPosterRegistrationRequest.serializeBinaryToWriter(
			this,
			writer
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.EventPosterRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.EventPosterRegistrationRequest.serializeBinaryToWriter =
	function (message, writer) {
		var f = undefined;
		f = message.getUsername();
		if (f.length > 0) {
			writer.writeString(1, f);
		}
		f = message.getPassword();
		if (f.length > 0) {
			writer.writeString(2, f);
		}
		f = message.getEmail();
		if (f.length > 0) {
			writer.writeString(3, f);
		}
		f = message.getFullName();
		if (f.length > 0) {
			writer.writeString(4, f);
		}
		f = message.getRole();
		if (f.length > 0) {
			writer.writeString(5, f);
		}
	};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.getUsername =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationRequest} returns this
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.setUsername =
	function (value) {
		return jspb.Message.setProto3StringField(this, 1, value);
	};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.getPassword =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 2, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationRequest} returns this
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.setPassword =
	function (value) {
		return jspb.Message.setProto3StringField(this, 2, value);
	};

/**
 * optional string email = 3;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.getEmail =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 3, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationRequest} returns this
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.setEmail = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string full_name = 4;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.getFullName =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 4, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationRequest} returns this
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.setFullName =
	function (value) {
		return jspb.Message.setProto3StringField(this, 4, value);
	};

/**
 * optional string role = 5;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.getRole =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 5, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationRequest} returns this
 */
proto.EventSphere.EventPosterRegistrationRequest.prototype.setRole = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.EventPosterRegistrationResponse.prototype.toObject =
		function (opt_includeInstance) {
			return proto.EventSphere.EventPosterRegistrationResponse.toObject(
				opt_includeInstance,
				this
			);
		};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.EventPosterRegistrationResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.EventPosterRegistrationResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.EventPosterRegistrationResponse}
 */
proto.EventSphere.EventPosterRegistrationResponse.deserializeBinary = function (
	bytes
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.EventPosterRegistrationResponse();
	return proto.EventSphere.EventPosterRegistrationResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.EventPosterRegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.EventPosterRegistrationResponse}
 */
proto.EventSphere.EventPosterRegistrationResponse.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {string} */ (reader.readString());
					msg.setMessage(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.EventPosterRegistrationResponse.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.EventSphere.EventPosterRegistrationResponse.serializeBinaryToWriter(
			this,
			writer
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.EventPosterRegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.EventPosterRegistrationResponse.serializeBinaryToWriter =
	function (message, writer) {
		var f = undefined;
		f = message.getMessage();
		if (f.length > 0) {
			writer.writeString(1, f);
		}
	};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.EventSphere.EventPosterRegistrationResponse.prototype.getMessage =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EventPosterRegistrationResponse} returns this
 */
proto.EventSphere.EventPosterRegistrationResponse.prototype.setMessage =
	function (value) {
		return jspb.Message.setProto3StringField(this, 1, value);
	};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.PostEventRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.PostEventRequest.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.PostEventRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.PostEventRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
				description: jspb.Message.getFieldWithDefault(msg, 2, ""),
				startDate:
					(f = msg.getStartDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				endDate:
					(f = msg.getEndDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				venue: jspb.Message.getFieldWithDefault(msg, 5, ""),
				organizer: jspb.Message.getFieldWithDefault(msg, 6, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.PostEventRequest}
 */
proto.EventSphere.PostEventRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.PostEventRequest();
	return proto.EventSphere.PostEventRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.PostEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.PostEventRequest}
 */
proto.EventSphere.PostEventRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setEventName(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setDescription(value);
				break;
			case 3:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setStartDate(value);
				break;
			case 4:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setEndDate(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setVenue(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setOrganizer(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.PostEventRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.PostEventRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.PostEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.PostEventRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getEventName();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getStartDate();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getEndDate();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getVenue();
	if (f.length > 0) {
		writer.writeString(5, f);
	}
	f = message.getOrganizer();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
};

/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.EventSphere.PostEventRequest.prototype.getEventName = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setEventName = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string description = 2;
 * @return {string}
 */
proto.EventSphere.PostEventRequest.prototype.getDescription = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setDescription = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp start_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.PostEventRequest.prototype.getStartDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			3
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setStartDate = function (value) {
	return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.clearStartDate = function () {
	return this.setStartDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.PostEventRequest.prototype.hasStartDate = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional google.protobuf.Timestamp end_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.PostEventRequest.prototype.getEndDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			4
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setEndDate = function (value) {
	return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.clearEndDate = function () {
	return this.setEndDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.PostEventRequest.prototype.hasEndDate = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional string venue = 5;
 * @return {string}
 */
proto.EventSphere.PostEventRequest.prototype.getVenue = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setVenue = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string organizer = 6;
 * @return {string}
 */
proto.EventSphere.PostEventRequest.prototype.getOrganizer = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.PostEventRequest} returns this
 */
proto.EventSphere.PostEventRequest.prototype.setOrganizer = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.PostEventResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.PostEventResponse.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.PostEventResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.PostEventResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.PostEventResponse}
 */
proto.EventSphere.PostEventResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.PostEventResponse();
	return proto.EventSphere.PostEventResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.PostEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.PostEventResponse}
 */
proto.EventSphere.PostEventResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.PostEventResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.PostEventResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.PostEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.PostEventResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.EventSphere.PostEventResponse.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.PostEventResponse} returns this
 */
proto.EventSphere.PostEventResponse.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.FetchEventsRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.FetchEventsRequest.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.FetchEventsRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.FetchEventsRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				filter: jspb.Message.getFieldWithDefault(msg, 1, ""),
				value: jspb.Message.getFieldWithDefault(msg, 2, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.FetchEventsRequest}
 */
proto.EventSphere.FetchEventsRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.FetchEventsRequest();
	return proto.EventSphere.FetchEventsRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.FetchEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.FetchEventsRequest}
 */
proto.EventSphere.FetchEventsRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setFilter(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setValue(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.FetchEventsRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.FetchEventsRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.FetchEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.FetchEventsRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getFilter();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getValue();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional string filter = 1;
 * @return {string}
 */
proto.EventSphere.FetchEventsRequest.prototype.getFilter = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.FetchEventsRequest} returns this
 */
proto.EventSphere.FetchEventsRequest.prototype.setFilter = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.EventSphere.FetchEventsRequest.prototype.getValue = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.FetchEventsRequest} returns this
 */
proto.EventSphere.FetchEventsRequest.prototype.setValue = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.Event.prototype.toObject = function (opt_includeInstance) {
		return proto.EventSphere.Event.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.Event} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.Event.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				id: jspb.Message.getFieldWithDefault(msg, 1, ""),
				eventName: jspb.Message.getFieldWithDefault(msg, 2, ""),
				description: jspb.Message.getFieldWithDefault(msg, 3, ""),
				startDate:
					(f = msg.getStartDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				endDate:
					(f = msg.getEndDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				venue: jspb.Message.getFieldWithDefault(msg, 6, ""),
				organizer: jspb.Message.getFieldWithDefault(msg, 7, ""),
				status: jspb.Message.getFieldWithDefault(msg, 8, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.Event}
 */
proto.EventSphere.Event.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.Event();
	return proto.EventSphere.Event.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.Event}
 */
proto.EventSphere.Event.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setEventName(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setDescription(value);
				break;
			case 4:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setStartDate(value);
				break;
			case 5:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setEndDate(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setVenue(value);
				break;
			case 7:
				var value = /** @type {string} */ (reader.readString());
				msg.setOrganizer(value);
				break;
			case 8:
				var value = /** @type {string} */ (reader.readString());
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.Event.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.Event.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.Event.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getEventName();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getStartDate();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getEndDate();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getVenue();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
	f = message.getOrganizer();
	if (f.length > 0) {
		writer.writeString(7, f);
	}
	f = message.getStatus();
	if (f.length > 0) {
		writer.writeString(8, f);
	}
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getId = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setId = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getEventName = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setEventName = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string description = 3;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getDescription = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setDescription = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional google.protobuf.Timestamp start_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.Event.prototype.getStartDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			4
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setStartDate = function (value) {
	return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.clearStartDate = function () {
	return this.setStartDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.Event.prototype.hasStartDate = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional google.protobuf.Timestamp end_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.Event.prototype.getEndDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			5
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setEndDate = function (value) {
	return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.clearEndDate = function () {
	return this.setEndDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.Event.prototype.hasEndDate = function () {
	return jspb.Message.getField(this, 5) != null;
};

/**
 * optional string venue = 6;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getVenue = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setVenue = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string organizer = 7;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getOrganizer = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setOrganizer = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string status = 8;
 * @return {string}
 */
proto.EventSphere.Event.prototype.getStatus = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.Event} returns this
 */
proto.EventSphere.Event.prototype.setStatus = function (value) {
	return jspb.Message.setProto3StringField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.EditEventRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.EditEventRequest.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.EditEventRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.EditEventRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
				eventName: jspb.Message.getFieldWithDefault(msg, 2, ""),
				description: jspb.Message.getFieldWithDefault(msg, 3, ""),
				startDate:
					(f = msg.getStartDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				endDate:
					(f = msg.getEndDate()) &&
					google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
				venue: jspb.Message.getFieldWithDefault(msg, 6, ""),
				status: jspb.Message.getFieldWithDefault(msg, 7, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.EditEventRequest}
 */
proto.EventSphere.EditEventRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.EditEventRequest();
	return proto.EventSphere.EditEventRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.EditEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.EditEventRequest}
 */
proto.EventSphere.EditEventRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setEventId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setEventName(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setDescription(value);
				break;
			case 4:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setStartDate(value);
				break;
			case 5:
				var value = new google_protobuf_timestamp_pb.Timestamp();
				reader.readMessage(
					value,
					google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
				);
				msg.setEndDate(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setVenue(value);
				break;
			case 7:
				var value = /** @type {string} */ (reader.readString());
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.EditEventRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.EditEventRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.EditEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.EditEventRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getEventId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getEventName();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getStartDate();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getEndDate();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
		);
	}
	f = message.getVenue();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
	f = message.getStatus();
	if (f.length > 0) {
		writer.writeString(7, f);
	}
};

/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.EventSphere.EditEventRequest.prototype.getEventId = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setEventId = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.EventSphere.EditEventRequest.prototype.getEventName = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setEventName = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string description = 3;
 * @return {string}
 */
proto.EventSphere.EditEventRequest.prototype.getDescription = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setDescription = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional google.protobuf.Timestamp start_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.EditEventRequest.prototype.getStartDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			4
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setStartDate = function (value) {
	return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.clearStartDate = function () {
	return this.setStartDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.EditEventRequest.prototype.hasStartDate = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional google.protobuf.Timestamp end_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.EventSphere.EditEventRequest.prototype.getEndDate = function () {
	return /** @type{?proto.google.protobuf.Timestamp} */ (
		jspb.Message.getWrapperField(
			this,
			google_protobuf_timestamp_pb.Timestamp,
			5
		)
	);
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setEndDate = function (value) {
	return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.clearEndDate = function () {
	return this.setEndDate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventSphere.EditEventRequest.prototype.hasEndDate = function () {
	return jspb.Message.getField(this, 5) != null;
};

/**
 * optional string venue = 6;
 * @return {string}
 */
proto.EventSphere.EditEventRequest.prototype.getVenue = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setVenue = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string status = 7;
 * @return {string}
 */
proto.EventSphere.EditEventRequest.prototype.getStatus = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventRequest} returns this
 */
proto.EventSphere.EditEventRequest.prototype.setStatus = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.EditEventResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.EditEventResponse.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.EditEventResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.EditEventResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.EditEventResponse}
 */
proto.EventSphere.EditEventResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.EditEventResponse();
	return proto.EventSphere.EditEventResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.EditEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.EditEventResponse}
 */
proto.EventSphere.EditEventResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.EditEventResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.EditEventResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.EditEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.EditEventResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.EventSphere.EditEventResponse.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.EditEventResponse} returns this
 */
proto.EventSphere.EditEventResponse.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.DeleteEventRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.DeleteEventRequest.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.DeleteEventRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.DeleteEventRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.DeleteEventRequest}
 */
proto.EventSphere.DeleteEventRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.DeleteEventRequest();
	return proto.EventSphere.DeleteEventRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.DeleteEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.DeleteEventRequest}
 */
proto.EventSphere.DeleteEventRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setEventId(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.DeleteEventRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.DeleteEventRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.DeleteEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.DeleteEventRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getEventId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.EventSphere.DeleteEventRequest.prototype.getEventId = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.DeleteEventRequest} returns this
 */
proto.EventSphere.DeleteEventRequest.prototype.setEventId = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.EventSphere.DeleteEventResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.EventSphere.DeleteEventResponse.toObject(
			opt_includeInstance,
			this
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.EventSphere.DeleteEventResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.EventSphere.DeleteEventResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSphere.DeleteEventResponse}
 */
proto.EventSphere.DeleteEventResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.EventSphere.DeleteEventResponse();
	return proto.EventSphere.DeleteEventResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSphere.DeleteEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSphere.DeleteEventResponse}
 */
proto.EventSphere.DeleteEventResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSphere.DeleteEventResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.EventSphere.DeleteEventResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSphere.DeleteEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSphere.DeleteEventResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.EventSphere.DeleteEventResponse.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.EventSphere.DeleteEventResponse} returns this
 */
proto.EventSphere.DeleteEventResponse.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

goog.object.extend(exports, proto.EventSphere);
